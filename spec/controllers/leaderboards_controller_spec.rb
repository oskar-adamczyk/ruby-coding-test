# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe LeaderboardsController, type: :controller do
  let(:invalid_attributes) { { name: nil } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LeaderboardsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      _leaderboard = Leaderboard.create! attributes_for(:leaderboard)
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      leaderboard = Leaderboard.create! attributes_for(:leaderboard)
      get :show, params: { id: leaderboard.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      leaderboard = Leaderboard.create! attributes_for(:leaderboard)
      get :edit, params: { id: leaderboard.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Leaderboard" do
        expect do
          post :create, params: { leaderboard: attributes_for(:leaderboard) }, session: valid_session
        end.to change(Leaderboard, :count).by(1)
      end

      it "redirects to the created leaderboard" do
        post :create, params: { leaderboard: attributes_for(:leaderboard) }, session: valid_session
        expect(response).to redirect_to(Leaderboard.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { leaderboard: invalid_attributes }, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) { { name: nil } }

      it "updates the requested leaderboard" do
        leaderboard = Leaderboard.create! attributes_for(:leaderboard)
        put :update, params: { id: leaderboard.to_param, leaderboard: new_attributes }, session: valid_session
        leaderboard.reload
      end

      it "redirects to the leaderboard" do
        leaderboard = Leaderboard.create! attributes_for(:leaderboard)
        put :update, params: { id: leaderboard.to_param, leaderboard: attributes_for(:leaderboard) },
                     session: valid_session
        expect(response).to redirect_to(leaderboard)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        leaderboard = Leaderboard.create! attributes_for(:leaderboard)
        put :update, params: { id: leaderboard.to_param, leaderboard: invalid_attributes }, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE #destroy", type: :transactional do
    it "destroys the requested leaderboard" do
      leaderboard = Leaderboard.create! attributes_for(:leaderboard)
      expect do
        delete :destroy, params: { id: leaderboard.to_param }, session: valid_session
      end.to change(Leaderboard, :count).by(-1)
    end

    it "redirects to the leaderboards list" do
      leaderboard = Leaderboard.create! attributes_for(:leaderboard)
      delete :destroy, params: { id: leaderboard.to_param }, session: valid_session
      expect(response).to redirect_to(leaderboards_url)
    end
  end
end
